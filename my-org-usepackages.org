#+Title:   My use-package configuration in org-mode
#+Author:  Felix Brilej
#+STARTUP: showall

* Initialization
  I set some general CoLor variables with the prefix CL and i try to stick to these throughout
  this document whenever i redefine colors. I consider this my standard-library of "good colors"
  that i should use as my kind of color-palette when i go around and change defaults.

  #+BEGIN_SRC emacs-lisp
    (require 'use-package)
    ;; (setq debug-on-error t) (turn on if needed)
    (setq package-check-signature nil) ;; disables public key errors that i dont feel like investigating

    (setq cl-selection-background "ivory1")
    (setq cl-selection-foreground "gray5")

    (setq cl-headline "ghost white")
    (setq cl-first-level "royal blue")
    ;; (setq cl-second-level "IndianRed3")
    (setq cl-second-level "cornflower blue")
    (setq cl-third-level "SlateBlue3")
    ;; alternative for sunny days
    ;; (setq cl-third-level "SkyBlue1")
    (setq cl-meta-information-one "cornflower blue")
  #+END_SRC

  Keep .emacs.d clean
  #+BEGIN_SRC emacs-lisp
    (use-package no-littering
      :ensure t
      :config
      (require 'recentf)
      (add-to-list 'recentf-exclude no-littering-var-directory)
      (add-to-list 'recentf-exclude no-littering-etc-directory))
  #+END_SRC

* File-browsing and text-searching

** Recentf
  I hate browsing for files (I frequently use), this package is supposed to help me out with that
  #+BEGIN_SRC emacs-lisp
    (use-package recentf
      ;; i think it's build-in anyways but I'll just throw config at this problem until it is resolved
      :ensure t
      :config
      ;; Quote: When using TrampMode with recentf.el, it’s advisable to turn off the cleanup feature
      ;; of recentf that attempts to stat all the files and remove them from the recently accessed
      ;; list if they are readable. Tramp means that this requires recentf to open up a remote site
      ;; which will block your emacs process at the most inopportune times.
      ;;
      (setq recentf-auto-cleanup 'never)
      (recentf-mode 1)
      (setq recentf-max-saved-items 50)
      ;; get rid of `find-file-read-only' and replace it with something more useful.
      (global-set-key (kbd "C-x C-r") 'ido-recentf-open)
      (defun ido-recentf-open ()
        "Use `ido-completing-read' to \\[find-file] a recent file"
        (interactive)
        (if (find-file (ido-completing-read "Find recent file: " recentf-list))
            (message "Opening file...")
          (message "Aborting")))
      )
  #+END_SRC

** Helm
  A convenient interface to select about anything from a list: Browse files, select themes, show
  and select search-results and much more.

  Helm-mini is a revolution to navigating through buffers!
  #+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :init
  (define-key global-map "\C-xb" 'helm-mini)
  :config
  (setq helm-mini-default-sources '(helm-source-buffers-list
				    helm-source-recentf
				    helm-source-bookmarks
				    helm-source-buffer-not-found))
  (helm-mode 1)
  (set-face-attribute 'helm-selection nil
                    :background cl-selection-background
                    :foreground cl-selection-foreground)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (define-key global-map "\C-c\C-s" 'helm-grep-do-git-grep)
  ;; automatically resize the search window based on results (feels convenient)
  ;; (helm-autoresize-mode 1) ;; currently disabled since i keep using track of it due to the resizing
  )
  #+END_SRC

  A package that helps searching for text within the current file. Each matching line gets listed
  in an overview which is really good. A downfall to this is that it cant be used for
  keyboard-macros, for these the standard isearch works way better.
  #+BEGIN_SRC emacs-lisp
    (use-package helm-swoop
      :ensure t
      :config
      (global-set-key (kbd "C-s") 'helm-swoop-without-pre-input)
      )
  #+END_SRC

** Finding files
   As great as helm is, there is an even better file-finding package, however it hinders me from
   remote file editing, for which i then manually have to call "find-file", which is an inconvenience.
   #+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :config
  (require 'swiper)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  )
   #+END_SRC

*** TODO Make this more convenient
    Ideas:
    - Try the helm function again with better customization so it is convenient
    - Customize this open more so it does enable me to edit remote-files

** Searching for strings
  Deft searches for strings in my org-files, at work this takes forever to load though, so it is
  not a core part of my workflow. I might have to adapt to only search through text-files.
  #+BEGIN_SRC emacs-lisp
;; documentation over here: http://jblevins.org/projects/deft/
(use-package deft
  :ensure t ;;doesnt work on work pc (sometimes), unable to install from melpa
  :config
  (setq deft-extensions '("txt" "tex" "org"))
  (if (equal "work" (getenv "SYSENV"))
      (progn (setq deft-directory (concat "C:\\Users\\" (getenv "USERNAME") "\\Desktop\\Projekte")))
      )
  (if (or (equal "home" (getenv "SYSENV"))
          (equal "laptop" (getenv "SYSENV"))
          (equal "linux-vm" (getenv "SYSENV")))
      (progn )
    )
  (setq deft-directory "~/Dropbox/org")
  (setq deft-recursive t)
  (setq deft-use-filename-as-title t)
  )
  #+END_SRC

  This package searches for strings in the current textfile very conveniently since it gives you
  a quick overview over *all* of the search-results.
  This package however frequently breaks on windows, such that suddenly i can only scroll down in
  the result-list. Reinstalling the package fixes that, however that is a huge inconvenience.
  After reinstalling this package can break just by searching for "magit" in this file. That's it,
  I'm suspending this package.
  #+BEGIN_SRC emacs-lisp
    ;; (use-package swiper-helm
    ;;   :ensure t
    ;;   :config
    ;;   (global-set-key (kbd "C-s") 'swiper-helm)
    ;;   (global-set-key (kbd "C-c u") 'swiper-all)
    ;;   )
  #+END_SRC

** Open the explorer
   To open the OS-specific file-browser either use this command: =M-! explorer .= or the following
   code snippet:
   #+BEGIN_SRC emacs-lisp
   (defun browse-current-folder ()
     "open the current buffer’s folder"
     (interactive)
     (browse-url (concat "file://" (file-name-directory (buffer-file-name))))
   )
   (global-set-key [M-f9] 'browse-current-folder)
   #+END_SRC

* Conveniences

** Undo-tree
   Undo-tree provides a graphical representation of recent changes made to the file. When I first
   starting to use it it felt terrible, since a whole new window opens every time i call it. With
   time it has proven to be very helpful though.

   This package is best used selectively, when i just want to undo something I use ~M-S-_~, when I
   am not sure what just happened (maybe I deleted text on accident) I'll definately use ~C-x u~ and
   go through the last couple of iterations.
   #+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode)
  )
   #+END_SRC

** Which-key
   My guide for shortcuts i forget in part and for exploring options after already having pressed
   parts of a key-combination.
   #+BEGIN_SRC emacs-lisp :tangle no
(use-package which-key
  :ensure t
  :config
  (which-key-setup-side-window-right)
  (setq which-key-popup-type 'side-window)
  (which-key-mode)
  :defer 5
  )
    #+END_SRC

** Immortal-scratch
   Respawns the scratch buffer when its killed, feels just right
   #+BEGIN_SRC emacs-lisp
(use-package immortal-scratch
  :ensure t
  :config
  (immortal-scratch-mode t)
  )
   #+END_SRC

** Yasnippet
   #+BEGIN_SRC emacs-lisp
     ;; Currently there is a problem "package does not untar cleanly"
     (use-package yasnippet
       :ensure t
       :init
       (define-key global-map "\C-cy" 'yas/insert-snippet)
       ;;(setq yas-snippet-dirs (append yas-snippet-dirs
       ;;"~/.emacs.d/elpa/yasnippet-20150912.1330/snippets/"))
       :config
       (yas-global-mode 1)
       :defer 5
     )
   #+END_SRC

** Beginend
   Beginend is a package that is supposed to improve on the navigation to the beginning and end of
   buffer, depending on the mode of course.

   #+BEGIN_SRC emacs-lisp
     (use-package beginend
       :ensure t
       :config
       (beginend-global-mode)
       )
   #+END_SRC

** Hydras
   Code to easily, incrementally adjust the transparency settings:
   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :ensure t
       )

     (defun my--set-transparency (inc)
       "Increase or decrease the selected frame transparency"
       (let* ((alpha (frame-parameter (selected-frame) 'alpha))
              (next-alpha (cond ((not alpha) 100)
                                ((> (- alpha inc) 100) 100)
                                ((< (- alpha inc) 0) 0)
                                (t (- alpha inc)))))
         (set-frame-parameter (selected-frame) 'alpha next-alpha)))

     (defhydra hydra-transparency (:columns 2)
       "
       ALPHA : [ %(frame-parameter nil 'alpha) ]
       "
       ("j" (lambda () (interactive) (my--set-transparency +1)) "+ more")
       ("k" (lambda () (interactive) (my--set-transparency -1)) "- less")
       ("J" (lambda () (interactive) (my--set-transparency +10)) "++ more")
       ("K" (lambda () (interactive) (my--set-transparency -10)) "-- less")
       ("=" (lambda (value) (interactive "nTransparency Value 0 - 100 opaque:")
              (set-frame-parameter (selected-frame) 'alpha value)) "Set to ?" :color blue))
   #+END_SRC

** Smooth-scrolling
   This mode doesnt have a good interaction with C-l which centers the current line in the buffer
   to the middle, top and bottom. Using C-l to put the current line to the top of the buffer and
   then pressing UP results in an unpleasant shift of the buffer position. However for simple
   scrolling this is nice.

   This mode also makes next-line and previous-line so slow that it is uncomfortable to use.

   However scrolling is nice with this, lol. I have it disabled right now for its disadvantages
   #+BEGIN_SRC emacs-lisp :tangle no
(use-package smooth-scrolling
  :ensure t
  :init
  (add-hook 'org-mode-hook (lambda () (smooth-scrolling-mode 1)))
  )
   #+END_SRC

** Smartparens
   This package is sometimes not so smart, sometimes it inserts parenthesis when i dont want them,
   especially in org-mode. I need to customize this more.
   #+BEGIN_SRC emacs-lisp
;; smartparens, a mode that tries to be smart around parentheses of all kinds
(use-package smartparens
  :ensure t
  :init
  (smartparens-global-mode t)
  ;; make the overlay disappear
  (custom-set-faces '(sp-pair-overlay-face ((t nil))))
  )
   #+END_SRC

** Writeroom extension
   #+BEGIN_SRC emacs-lisp
   (use-package writeroom-mode
   :ensure t
   :config
   (setq writeroom-width 100)
   )
   #+END_SRC

** Rainbow delimiters
   This package is kind of a useless extension since the colors it uses are way too subtle
   #+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
  )
   #+END_SRC

** Flyspell mode for spelling correction
   Prerequisite on ubuntu is the following
   #+BEGIN_SRC sh :tangle no :results silent
   sudo apt-get install aspell-de
   #+END_SRC

   I dont use this right now since it slow editing down a bit and correct spelling is actually not
   that crucial. Also writing german and english in the same document seems confusing for flyspell
   (as for every / most grammar correction programms).
   #+BEGIN_SRC emacs-lisp :tangle no
     (if (equal "laptop" (getenv "SYSENV"))
         (add-hook 'org-mode-hook 'turn-on-flyspell)
     )
   #+END_SRC

** Emoji-autocomplete (company-emoji)
   #+BEGIN_SRC emacs-lisp
;; If i dont uncomment this this attempts to get installed at work?!? TODO
;; I bet its the new use-package config i took from sachac's config
;; Settings for company plus company-emoji
(use-package company-emoji
  :if (equal "laptop" (getenv "SYSENV"))
  :init
  (require 'color)
  (let ((bg (face-attribute 'default :background)))
    (custom-set-faces
     `(company-tooltip ((t (:inherit default :background ,(color-lighten-name bg 2)))))
     `(company-scrollbar-bg ((t (:background ,(color-lighten-name bg 10)))))
     `(company-scrollbar-fg ((t (:background ,(color-lighten-name bg 5)))))
     `(company-tooltip-selection ((t (:inherit font-lock-function-name-face))))
     `(company-tooltip-common ((t (:inherit font-lock-constant-face))))))
  )
   #+END_SRC

** Copy-clipboard hack
   Save whatever’s in the current (system) clipboard before replacing it with the Emacs’ text.

   More tricks like this: https://github.com/dakrone/eos/blob/master/eos.org
   #+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
   #+END_SRC

** Jump to split window
   When splitting a window, I invariably want to switch to the new window. This makes that automatic.
   #+BEGIN_SRC emacs-lisp
(defun fbr/split-window-below-and-switch ()
  "Split the window horizontally, then switch to the new pane."
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))

(defun fbr/split-window-right-and-switch ()
  "Split the window vertically, then switch to the new pane."
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))

(global-set-key (kbd "C-x 2") 'fbr/split-window-below-and-switch)
(global-set-key (kbd "C-x 3") 'fbr/split-window-right-and-switch)
   #+END_SRC

* The big guns

** Magit
   On some systems the "GIT_ASKPASS" variable i set leads to a nice GUI for entering usename on
   passwords, on other systems i get an ugly error-message everytime i "git push". This is open
   for improvement but not a big issue.
   #+BEGIN_SRC emacs-lisp
     ;; set the key-binding unconditionally for times when magit is not yet loaded yet thanks to the
     ;; usepackage-defer option
     (define-key global-map (kbd "C-c m") 'magit-status)
     ;; Warning: The Windows User-Home needs to be in some kind of path such that magit finds the
     ;; .gitconfig
     (use-package magit
       :if (cond ((equal "home" (getenv "SYSENV")) (message "Loading magit"))
                 ((equal "laptop" (getenv "SYSENV")) (message "Loading magit"))
                 ((equal "work" (getenv "SYSENV")) (message "Loading magit"))
                 ((equal nil (getenv "SYSENV")) (message "Loading magit"))
                 )
       :ensure t
       :config
       (add-to-list 'exec-path "C:/Program Files/Git/bin")
       (setenv "GIT_ASKPASS" "git-gui--askpass")
       ;; set git home for university setup
       (if (equal nil (getenv "SYSENV")) (setq magit-git-executable "/fibus/fs0/10/sefb1704/bin/git"))
       :defer 5
       )
   #+END_SRC

   Also use this:
   #+BEGIN_SRC emacs-lisp
     (use-package git-timemachine
       :ensure t
       )
   #+END_SRC

*** TODO Warn if username and useremail are not set

*** Define emacs shutdown function (taken from baron42bba)
    Emacs is a powerful tool, so powerfull that i need to protect myself from deleting huge
    chunks of my org-files on accident without noticing. I can do this by committing after each
    day of work, so if i find out today that recently i must have deleted some part of my org-file
    i can go back into the file-history to bring it back. The emacs backup-files dont help in this
    scenario.

    #+BEGIN_SRC emacs-lisp
      ;; define function to shutdown emacs server instance
      (defun server-shutdown ()
        "Save buffers, Quit, and Shutdown (kill) server"
        (interactive)
        (save-some-buffers)
        ;; not adapted yet:
        ;; (if (equal "work" (getenv "SYSENV"))
        ;;     (progn
        ;;       (shell-command "git --work-tree ~/workorg/ --git-dir ~/workorg/.git commit -a -m 'autocommit'")
        ;;       (shell-command "git --work-tree ~/workorg/ --git-dir ~/workorg/.git push origin")
        ;;       ))
        (if (equal "home" (getenv "SYSENV"))
            (progn
              (setq fbr/my-git-dir (concat "C:\\Users\\" (getenv "USERNAME") "\\Dropbox\\org\\gtd\\"))
              (shell-command (concat "git --work-tree " fbr/my-git-dir " --git-dir " fbr/my-git-dir ".git commit -a -m 'autocommit'"))
              (shell-command (concat "git --work-tree " fbr/my-git-dir " --git-dir " fbr/my-git-dir ".git push backup master"))
              ))
        (if (equal "work" (getenv "SYSENV"))
            (progn
              (setq fbr/my-git-dir (concat "C:\\Users\\" (getenv "USERNAME") "\\Desktop\\Projekte\\org\\"))
              (shell-command (concat "git --work-tree " fbr/my-git-dir " --git-dir " fbr/my-git-dir ".git commit -a -m 'autocommit'"))
              (shell-command (concat "git --work-tree " fbr/my-git-dir " --git-dir " fbr/my-git-dir ".git push backup master"))
              ))
        (kill-emacs)
        )
    #+END_SRC

** Org-mode
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure org-plus-contrib
       :init
       ;; Taken from: http://endlessparentheses.com/applying-markup-to-strings-in-org-mode.html
       ;; This HAS to come before (require 'org) / the init section of use-package
       (setq org-emphasis-regexp-components
             '("     ('\"{“”"
               "-   .,!?;''“”\")}/\\“”"
               "    \t\r\n,"
               "."
               5))
       ;; markup over up to 5 multiple lines
       ;; (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\r\n,\"")
       ;; (setcar (nthcdr 4 org-emphasis-regexp-components) 5)
       ;; (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
       ;; (custom-set-variables `(org-emphasis-alist ',org-emphasis-alist))
       :config
       (add-hook 'comint-output-filter-functions
                 'comint-strip-ctrl-m)
       ;; Custom Keybindings
       (fset 'fbr/convert-listitem-into-checklistitem
             "\355\C-f\C-f[]\C-f\C-b \C-b\C-b \C-a\C-n")
       (global-set-key (kbd "C-c b") 'fbr/convert-listitem-into-checklistitem)
       (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
       ;; Visual modifications
       ;; Strike through DONE headlines
       (setq org-fontify-done-headline t)
       ;; autofill hooks for automatic indentation
       (add-hook 'change-log-mode-hook 'turn-on-auto-fill)
       (add-hook 'org-mode-hook 'turn-on-auto-fill)
       ;; dont scroll automatically such that "point" is visible
       (setq auto-hscroll-mode nil)
       (setq org-hide-emphasis-markers t)
       ;; change from ... to the arrow
       (setq org-ellipsis "⤵")
       (custom-set-faces '(org-ellipsis ((t (:inherit org-ellispsis :height 0.7)))))
       ;; when i narrow down to the current subsection using `org-tree-to-indirect-buffer' i dont want
       ;; to create a new window, but rather open the new buffer at the current position
       (setq org-indirect-buffer-display 'current-window)
       )
   #+END_SRC

*** Org-mode operation speed improvments
    Keyboard shortcuts are probably the first place to start
    #+BEGIN_SRC emacs-lisp
      (define-key global-map "\C-cl" 'org-store-link)
      (define-key global-map "\C-ca" 'org-agenda)
      (define-key global-map "\C-cc" 'org-capture)
      (define-key global-map "\M-n" 'org-metadown)
      (define-key global-map "\M-p" 'org-metaup)
      (define-key org-mode-map "\C-m" 'nil) ;; why do i do this?
      (define-key org-mode-map (kbd "<f5>") 'org-babel-execute-src-block)
      (global-set-key (kbd "<f9>") 'org-todo)
      (define-key global-map (kbd "<f10>") 'org-clock-goto)
    #+END_SRC

    Jump to beginning / end of heading by default (should make navigation faster once i get used
    to this)
    #+BEGIN_SRC emacs-lisp
      (setq org-special-ctrl-a/e t)
    #+END_SRC

    Truely global org-mode keybindings (taken from here:
    https://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs)

    Sadly i didnt get this to work with C-c C-x C-j, C-j always created a newline. However i think
    this is a good start, therefor im keeping this!
    #+BEGIN_SRC emacs-lisp :results silent :tangle no
      (defvar my-keys-minor-mode-map
        (let ((map (make-sparse-keymap)))
          ;; make this one global so i can jump from everywhere
          (define-key map (kbd "\C-c\C-x\C-j") 'org-clock-goto)
          map)
        "my-keys-minor-mode keymap.")

      (define-minor-mode my-keys-minor-mode
        "A minor mode so that my key settings override annoying major modes."
        :init-value t
        :lighter " my-keys")

      (my-keys-minor-mode 1)

      (add-hook 'after-load-functions 'my-keys-have-priority)

      (defun my-keys-have-priority (_file)
        "Try to ensure that my keybindings retain priority over other minor modes.

      Called via the `after-load-functions' special hook."
        (unless (eq (caar minor-mode-map-alist) 'my-keys-minor-mode)
          (let ((mykeys (assq 'my-keys-minor-mode minor-mode-map-alist)))
            (assq-delete-all 'my-keys-minor-mode minor-mode-map-alist)
            (add-to-list 'minor-mode-map-alist mykeys))))
    #+END_SRC

*** Org-mode visual improvements
    #+BEGIN_SRC emacs-lisp
      ;; Fontify done checkbox items in org-mode
      (font-lock-add-keywords
       'org-mode
       `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-headline-done prepend))
       'append)

      ;; Circulate Bullets instead of asteriks for list items
      (font-lock-add-keywords 'org-mode
                              '(("^ +\\([-*]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    #+END_SRC

*** Org-mode agenda-files
    Depending on my system-environment which i deduce from the system environment variable
    "SYSENV" which i manually set on the systems i use i have different workflows.

    At work i have more todo states, and different agenda files than for example at home. This is
    reflected by the following settings.

**** Home
     #+BEGIN_SRC emacs-lisp
       (if (equal "home" (getenv "SYSENV"))
           (progn (setq org-agenda-files (list
                       (concat "C:/Users/" (getenv "USERNAME") "/Dropbox/org/gtd/tasks.org")
                       ; (concat "C:/Users/" (getenv "USERNAME") "/Dropbox/org/hobby/dactyl-keyboard/dactyl-keyboard-guide/index.org")
                       (concat "C:/Users/" (getenv "USERNAME") "/Dropbox/org/uni/bachelor_thesis/bachelor_thesis.org")
                       ; (concat "C:/Users/" (getenv "USERNAME") "/Dropbox/org/gtd/tasks_2015")
                       ; (concat "C:/Users/" (getenv "USERNAME") "/Dropbox/org/gtd/tasks_2016")
                       ; (concat "C:/Users/" (getenv "USERNAME") "/Dropbox/org/gtd/tasks_2017")
              			    ))
              ;; org-capture setup
              (setq org-capture-templates
              	  '(("a" "Add a task to tasks.org." entry
              	     (file (concat "C:/Users/" (getenv "USERNAME") "/Dropbox/org/gtd/tasks.org"))
              	     "* TODO %? SCHEDULED: %t")))
              (setq org-default-notes-file (concat "C:/Users/" (getenv "USERNAME") "/Dropbox/org/gtd/tasks.org"))
              (setq org-capture-templates
                    '(("t" "todo" entry (file org-default-notes-file)
                       "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
                      ("m" "Meeting" entry (file org-default-notes-file)
                       "* Meeting mit %? :meeting:\n%t" :clock-in t :clock-resume t)
                      ("i" "Idea" entry (file+headline org-default-notes-file "Events / Aufgaben");;(file org-default-notes-file)
                       "* %? :idea: \n%t" :clock-in t :clock-resume t)
                      ;; I dont have NEXT implemented yet into my workflow / config
                      ;; ("n" "Next Task" entry (file+headline org-default-notes-file "Events / Aufgaben")
                      ;;  "** NEXT %? \nDEADLINE: %t")
                      )
                    )
              (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3))))
              )
         )
     #+END_SRC

**** Laptop
      #+BEGIN_SRC emacs-lisp
       (if (equal "laptop" (getenv "SYSENV"))
           (progn (setq org-agenda-files (list
                                          (concat "/home/" (getenv "USER") "/Dropbox/org/gtd/tasks.org")
                                          (concat "/home/" (getenv "USER") "/Dropbox/org/gtd/tasks.org_archive")
                                          (concat "/home/" (getenv "USER") "/Dropbox/org/hobby/dactyl-keyboard/dactyl-keyboard-guide/index.org")
                                          (concat "/home/" (getenv "USER") "/Dropbox/org/uni/bachelor_thesis/bachelor_thesis.org")
                                          (concat "/home/" (getenv "USER") "/Dropbox/org/gtd/tasks_2015")
                                          (concat "/home/" (getenv "USER") "/Dropbox/org/gtd/tasks_2016")
                                          (concat "/home/" (getenv "USER") "/Dropbox/org/gtd/tasks_2017")
                                          ))
              ;; org-capture setup
              (setq org-default-notes-file (concat "/home/" (getenv "USERNAME") "/Dropbox/org/gtd/tasks.org"))
              (setq org-capture-templates
                    '(("t" "todo" entry (file+headline org-default-notes-file "Events / Aufgaben")
                       "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
                      ("m" "Meeting" entry (file+headline org-default-notes-file "Events / Aufgaben")
                       "* Meeting mit %? :meeting:\n%t" :clock-in t :clock-resume t)
                      ("i" "Idea" entry (file+headline org-default-notes-file "Events / Aufgaben")
                       "* %? :idea: \n%t" :clock-in t :clock-resume t)
                      )
                    )
              (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
                  )
         )
      #+END_SRC

**** Work
      #+BEGIN_SRC emacs-lisp
        (if (equal "work" (getenv "SYSENV"))
            (progn (setq org-agenda-files
                         (list (concat "C:\\Users\\" (getenv "USERNAME") "\\Desktop\\Projekte\\org\\projects.org")
                               ;(concat "C:\\Users\\" (getenv "USERNAME") "\\Desktop\\Projekte\\org\\projects.org_archive")
                               (concat "C:\\Users\\" (getenv "USERNAME") "\\Desktop\\Projekte\\request-tracker\\ticketsystem.org")))
                   ;; org-capture setup
                   (setq org-default-notes-file (concat "C:\\Users\\" (getenv "USERNAME") "\\Desktop\\Projekte\\org\\projects.org"))
                   (setq org-capture-templates
                         '(("t" "todo" entry (file+headline org-default-notes-file "Aufgaben")
                            "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
                           ("m" "Meeting" entry (file+headline org-default-notes-file "Aufgaben")
                            "* Meeting mit %? :meeting:\n%t" :clock-in t :clock-resume t)
                           ("i" "Idea" entry (file+headline org-default-notes-file "Aufgaben")
                            "* %? :idea: \n%t" :clock-in t :clock-resume t)
                           )
                         )
                   (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3))))
                   )
          )
       #+END_SRC

**** Shortcut to open my main agenda file
     #+BEGIN_SRC emacs-lisp
              (define-key global-map (kbd "<f6>") 'fbr/open_main_agenda_file)
              (defun fbr/open_main_agenda_file()
                (interactive)
                (if (or (equal "laptop" (getenv "SYSENV")) (equal "home" (getenv "SYSENV")))
                    (find-file "~//Dropbox//org//gtd//tasks.org")
                  )
                (if (equal "work" (getenv "SYSENV"))
                    (find-file (concat "C://Users//" (getenv "USERNAME") "//Desktop//Projekte//org//projects.org"))
                  )
                )
     #+END_SRC

*** Org-mode tags
    The horizontal position of tags is set here.
    #+BEGIN_SRC emacs-lisp
      (setq org-tags-column -70)
    #+END_SRC

    This setting should work together with your line-wrapping limit, such that tagged headings
    match the line-wrapped text below.

    To align the tags that already exist simple execute =org-align-all-tags= on the file. This is
    useful when changing the above setting, since it doesnt affect existing org-files.

*** Org-mode agenda settings
   #+BEGIN_SRC emacs-lisp
     ;; (time consuming!) appends a list of how much time was spend on which heading (project) at the
     ;; end of the default agenda view. Disabled by default, sometimes i like to toggle it on.
     (setq org-agenda-start-with-clockreport-mode nil)
     ;; Set default column view headings: Task Total-Time Time-Stamp
     (setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
     ;; A package to visualize repeated tasks in the org agenda
     (require 'org-habit)
     (add-to-list 'org-modules 'org-habit)
     (setq org-habit-show-habits-only-for-today nil)
     ;; add archived tasks to the agenda and clocktable, otherwise they dont show up
     (setq org-agenda-archives-mode t)
     (defun fbr/org-agenda-reduce-to-current-file()
       (interactive)
       (setq org-agenda-files (list (buffer-file-name)))
       )
     ;; start the agenda in a full window
     (setq org-agenda-window-setup 'current-window)
     ;; indicate the markdown-level when displaying tasks in agenda
     (setq org-tags-match-list-sublevels 'indented)
   #+END_SRC

   Set the default priority to C. This reflects how i use priorities:
   - ~A~: urgent, do this right now or it will blow up in your face
   - ~B~: do this one of these days, a possible candidate for priority ~A~
   - ~C~: do this whenever you feel like it some day in the future
   #+BEGIN_SRC emacs-lisp
   (setq org-default-priority 67) ;; the ascii code for C
   #+END_SRC

   Spice the agenda with my 1-month, 1-year and 5-year goals.

   Make it so that tags are put to the right-hand side of the window in org-agenda
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-finalize-agenda-hook 'place-agenda-tags)
     (defun place-agenda-tags ()
       "Put the agenda tags by the right border of the agenda window."
       (setq org-agenda-tags-column (- 4 (window-width)))
       (org-agenda-align-tags))
   #+END_SRC

*** Org-mode agenda custom views
    This agenda assumes that i have the following structure somewhere in my org-file:
    - Projects
      - Life-Goals
        - 1-month-goals :month1:
          - Professional :prof:
          - Private      :priv:
        - 1-year-goals :year1:
          - Professional
          - Private
        - 5-year-goals :year5:
          - Professional
          - Private

    This then gets inserted nicely into the agenda:
    - monthy professional goals
    - monthy private goals
    - agenda
    - 1-year goals
    - 5-year goals

    I do this to not lose track of the big picture while doing day-to-day tasks. This is an idea
    from the book "Time Management for System Administrators" by Thomas A. Limoncelli. He advices
    to include your long-term goal as a page in your personal planner so you can look at it from
    time to time.

    The todo-filter (+TODO<>\"\") makes it so that only the goals are visible, the headlines -
    which also match the tag-search this is based on - get excluded from the results which is
    convenient.
    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-custom-commands
            '(("c" "Agenda surrounded by long-term goals"
               (
                (tags "month1+prof+TODO<>\"\""
                      ((org-agenda-overriding-header "Monatliche professionelle Ziele")
                       )
                      )
                (tags "month1+priv+TODO<>\"\""
                      ((org-agenda-overriding-header "Monatliche persönliche Ziele")
                       )
                      )
                (agenda "")
                (tags "year1+TODO<>\"\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                       (org-agenda-overriding-header "1-Jahres-Ziele")
                       )
                      )
                (tags "year5+TODO<>\"\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                       (org-agenda-overriding-header "5-Jahres-Ziele")))
                ))
              ("k" "Agenda surrounded by milestones"
               (
                (tags "milestone+SCHEDULED<>\"\""
                      ((org-agenda-overriding-header "Scheduled Milestones")
                       )
                      )
                (agenda "")
                (tags "milestone+SCHEDULED=\"\""
                      ((org-agenda-overriding-header "Unscheduled Milestones")
                       )
                      )
                ))
              ("t" "TODOs sorted by priority"
               todo "TODO|PENDING"
               ((org-agenda-overriding-header "All open TODOs sorted by priority")
                (org-agenda-sorting-strategy '(priority-down todo-state-down))))
               )
              )
    #+END_SRC

**** Support for org-super-agenda
     Org-super-agenda source: https://github.com/alphapapa/org-super-agenda

     In the following i cut down the example from the github source from the things that cant
     possibly match to the stuff i use in my config
     #+BEGIN_SRC emacs-lisp
       (use-package org-super-agenda
         :ensure t
         :config
         (org-super-agenda-mode)
         (setq org-super-agenda-groups
               '(;; Each group has an implicit boolean OR operator between its selectors.
                 (:name "Today"  ; Optionally specify section name
                        :time-grid t)  ; Items that appear on the time grid
                 (:name "Important"
                        ;; Single arguments given alone
                        :tag "budget"
                        :priority "A")
                 (:priority<= "B"
                              ;; Show this section after "Today" and "Important", because
                              ;; their order is unspecified, defaulting to 0. Sections
                              ;; are displayed lowest-number-first.
                              :order 1)
                 ;; After the last group, the agenda will display items that didn't
                 ;; match any of these groups, with the default order position of 99
                 ))
         )
     #+END_SRC

**** Monthly budget view
     Taken from here:
     http://jcardente.blogspot.de/2010/06/org-mode-hack-tasks-done-last-month.html

     I use it to create my monthly financial report.

     #+BEGIN_SRC emacs-lisp
       (require 'calendar)

       (defun fbr/org-tasks-closed-in-month (&optional month year match-string)
         "Produces an org agenda tags view list of the tasks completed
       in the specified month and year. Month parameter expects a number
       from 1 to 12. Year parameter expects a four digit number. Defaults
       to the current month when arguments are not provided. Additional search
       criteria can be provided via the optional match-string argument "
         (interactive)
         (let* ((today (calendar-current-date))
                (for-month (or month (calendar-extract-month today)))
                (for-year  (or year  (calendar-extract-year today))))
           (org-tags-view nil
                 (concat
                  match-string
                  (format "+CLOSED>=\"[%d-%02d-01]\""
                          for-year for-month)
                  (format "+CLOSED<=\"[%d-%02d-%02d]\""
                          for-year for-month
                          (calendar-last-day-of-month for-month for-year))))))

       (defun fbr/budget-tasks-last-month ()
         "Produces an org agenda tags view list of all the tasks completed
       last month with the tag budget."
         (interactive)
         (let* ((today (calendar-current-date))
                (for-month (calendar-extract-month today))
                (for-year  (calendar-extract-year today)))
              (calendar-increment-month for-month for-year -1)
              (fbr/org-tasks-closed-in-month
               for-month for-year "TODO=\"DONE\"+budget")))
     #+END_SRC

*** Org-mode todo-keywords
    #+BEGIN_SRC emacs-lisp
      (if (equal "work" (getenv "SYSENV"))
          (progn (setq org-todo-keywords
                       '((sequence "TODO(t)" "PENDING(p)" "DELEGATED(e)" "|" "CANCELED(c)" "DONE(d)"))))
        )
      (if (or (equal "home" (getenv "SYSENV"))
              (equal "laptop" (getenv "SYSENV"))
              (equal "linux-vm" (getenv "SYSENV")))
          (progn (setq org-todo-keywords
                       '((sequence "TODO(t)" "|" "DONE(d)")
                         (sequence "PENDING(p)" "|" "CANCELED(c)")
                         ;;'((sequence "TODO(t)" "PENDING(p)" "|" "CANCELED(c)" "DONE(d)") ;; wouldnt this
                         ;;be correct? Whatever, it works..
                         ))
                 )
        )
    #+END_SRC

    Keyword-faces, these are independant of the system in use, even when org-todo-keywords differ
    from system to system.
    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keyword-faces
            '(("TODO" . org-warning)
              ("PENDING" . "#f0c674")
              ("DELEGATED" . "#81a2be")
              ("CANCELED" . (:foreground "#b5bd68" :weight bold))))
    #+END_SRC

    These keyword faces have an added background face. This looks good in some themes and i might
    toggle it from theme to theme.
    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keyword-faces
            '(("TODO" . org-warning)
              ("PENDING" . (:foreground "#f0c674" :background "#d09216"))
              ("DELEGATED" . (:foreground "#81a2be" :background "#456887" :box (:line-width 1 :style none)))
              ("CANCELED" . (:foreground "#b5bd68" :weight bold))))
    #+END_SRC

*** Latex-settings                                          :research:

**** bjm-article Template
     Including this into the usepackage-definition of org doesnt seem to work.
     This is some sample-template called bjmarticle i copied from the webs.
     #+BEGIN_SRC emacs-lisp
       (require 'ox-latex)
       (add-to-list 'org-latex-classes
                    '("bjmarticle"
                      "\\documentclass{article}
                       \\usepackage[utf8]{inputenc}
                       \\usepackage[T1]{fontenc}
                       \\usepackage{graphicx}
                       \\usepackage{longtable}
                       \\usepackage{hyperref}
                       \\usepackage{natbib}
                       \\usepackage{amssymb}
                       \\usepackage{amsmath}
                       \\usepackage{geometry}
                       \\geometry{a4paper,left=2.5cm,top=2cm,right=2.5cm,bottom=2cm,marginparsep=7pt, marginparwidth=.6in}"
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                    )
     #+END_SRC

**** stsreport Template
     A latex-template that is actually useful and that I will use for my bachelor-thesis.
     #+BEGIN_SRC emacs-lisp
       ;; Latex settings (somehow doesn't work if i put it in usepackage definition of org)
       (require 'ox-latex)
       (add-to-list 'org-latex-classes
                    '("stsreprt"
                      "\\documentclass[
                                     %%%%% Styles and Sizes
                                           %10pt,
                                           %11pt,
                                           %12pt,
                                           fancyheadings, % headings with seplines and logo
                                           %
                                           %%%%% Printing, Color and Binding
                                           %a4paper,
                                           %a5paper,
                                           %twoside, % single sided printout
                                           %oneside, % duplex printout (default)
                                           %% binding correction is used to compensate for the paper lost during binding
                                           %% of the document
                                           %BCOR=0.7cm, % binding correction
                                           %nobcorignoretitle, % do not ignore BCOR for title page
                                           %% the following two options only concern the graphics included by the document
                                           %% class
                                           %grayscaletitle, % keep the title in grayscale
                                           %grayscalebody, % keep the rest of the document in grayscale
                                           %
                                           %%%%% expert options: your mileage may vary
                                           %baseclass=..., % special option to use a different document baseclass
                                           ]{stsreprt}"
                      ("\\chapter{%s}" . "\\chapter*{%s}")
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                      )
                    )
     #+END_SRC

**** Enable specific latex-headers                          :research:
     Taken from here:
     http://emacs.stackexchange.com/questions/7890/org-plus-contrib-and-org-with-require-or-use-package?noredirect=1&lq=1

    #+BEGIN_SRC emacs-lisp
      (use-package org
        :ensure org-plus-contrib
        :config
        (require 'ox-extra)
        (ox-extras-activate '(ignore-headlines))
        )
    #+END_SRC
*** Orgmode bibliography                                    :research:
    Inspired from J. Kitchin's youtube video: https://www.youtube.com/watch?v=2t925KRBbFc

    #+BEGIN_SRC emacs-lisp
      (use-package org-ref
        :ensure t
        :config
        (setq org-ref-completion-library 'org-ref-helm-cite)
        (require 'org-ref)
        (require 'org-ref-pdf) ;; enable pdf drag n' drop
        (require 'doi-utils)
        (require 'org-ref-latex)
        (require 'org-ref-bibtex)
        (require 'org-ref-url-utils)

        ;; see org-ref for use of these variables
        (setq org-ref-bibliography-notes "~/Dropbox/org/uni/bachelor_thesis/notes.org"
              org-ref-default-bibliography '("~/Dropbox/org/uni/bachelor_thesis/bachelor_thesis.bib")
              org-ref-pdf-directory "~/Dropbox/org/uni/bachelor_thesis/"
              org-ref-pdf-directory "~/Dropbox/org/uni/bachelor_thesis/bibtex-pdfs/"
              )
        (setq org-latex-pdf-process
              '("pdflatex -interaction nonstopmode -output-directory %o %f"
                "bibtex %b"
                "pdflatex -interaction nonstopmode -output-directory %o %f"
                "pdflatex -interaction nonstopmode -output-directory %o %f")
              )
        (define-key org-mode-map (kbd "C-c [") 'org-reftex-citation)
        )
    #+END_SRC

*** Enable R codeblocks                                     :research:
    For this to work i had to install the ess-package:
    #+BEGIN_SRC sh :tangle no
    sudo apt-get install ess
    #+END_SRC
    After having installed this the following works
    #+BEGIN_SRC emacs-lisp
      (if (equal "laptop" (getenv "SYSENV")) ;; removed "home" from valid options, maybe a mistake
          (progn
            ;; found out about the path with dpkg -L ess
            (add-to-list 'load-path "/usr/share/emacs/site-lisp/ess/")
            (require 'ess-site))
        )
    #+END_SRC

    In addition we also need to load the org-babel language R over here:
    [[*Org-mode][Org-mode section]].

*** More latex settings - cdlatex
    From: http://www.clarkdonley.com/blog/2014-10-26-org-mode-and-writing-papers-some-tips.html
    "speed-up insertion of environments and math templates"

    From cdlatex.el:
    "CDLaTeX requires texmathp.el which is distributed with AUCTeX."
    #+BEGIN_SRC emacs-lisp
      ;; ;; Debugger entered--Lisp error: (error "tex-jp.el:0:0: error: scan-error: (Unbalanced parentheses 22806 42543)")
      ;; (use-package auctex
      ;; :ensure t
      ;; )

      ;; (use-package cdlatex
      ;; :ensure t
      ;; :config
      ;; (require 'auctex)
      ;; (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
      ;; )

    #+END_SRC

*** Org-mode alerts
    This  allows me to have super-cool appointment-reminders (sometimes causes error on start).
    #+BEGIN_SRC emacs-lisp
       ;; Make appt aware of appointments from the agenda
       (defun fbr/org-agenda-to-appt ()
         "Activate appointments found in `org-agenda-files'."
         (interactive)
         (require 'org)
         (let* ((today (org-date-to-gregorian
                        (time-to-days (current-time))))
                (files org-agenda-files) entries file)
           (while (setq file (pop files))
             (setq entries (append entries (org-agenda-get-day-entries
                                            file today :timestamp))))
           (setq entries (delq nil entries))
           (mapc (lambda(x)
                   (let* ((event (org-trim (get-text-property 1 'txt x)))
                          (time-of-day (get-text-property 1 'time-of-day x)) tod)
                     (when time-of-day
                       (setq tod (number-to-string time-of-day)
                             tod (when (string-match
                                        "\\([0-9]\\{1,2\\}\\)\\([0-9]\\{2\\}\\)" tod)
                                   (concat (match-string 1 tod) ":"
                                           (match-string 2 tod))))
                       (if tod (appt-add tod event))))) entries)))
       (defadvice fbr/org-agenda-to-appt (before wickedcool activate)
         "Clear the appt-time-msg-list."
         (defvar appt-time-msg-list)
         (setq appt-time-msg-list nil))
       (org-agenda-to-appt)
    #+END_SRC

*** Org-mode sourceblocks / org-babel
    Languages to load

    This hints towards renaming "sh" to shell: http://thread.gmane.org/gmane.emacs.orgmode/102877/focus=102882
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
         (R . t)
         (latex . t)
         (lisp . t)
         (shell . t)
         (perl . t)
         (dot . t) ;; activates graphviz dot support
         ))
    #+END_SRC

    Remove ^M Errors in Babel
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'process-coding-system-alist
                   '("bash" . (undecided-unix)))
    #+END_SRC

    Send stderror into the result drawer instead of an extra window (does this result in the rare
    deletion of text-chunks? I think that startet occuring when i introducted this setting)
    #+BEGIN_SRC emacs-lisp
      (setq org-babel-default-header-args:sh
            '((:prologue . "exec 2>&1") (:epilogue . ":"))
            )
    #+END_SRC

    Make TAB act as if it were issued in a buffer of the language’s major mode (doesnt work
    completely how i want it to yet)
    #+BEGIN_SRC emacs-lisp
      ;; (setq org-src-tab-acts-natively t)
    #+END_SRC

    When editing a code snippet, use the current window rather than opening up a new one (which
    shows the same information). This feels so much better!
    #+BEGIN_SRC emacs-lisp
      (setq org-src-window-setup 'current-window)
    #+END_SRC

    Load syntax-highlighting for source-blocks
    #+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t)
    #+END_SRC

    Dont try to evaluate source-blocks on export (this setting has fixed a weird bug for me, which
    showed this message: org-babel-exp-process-buffer: Wrong type argument: stringp, nil).
    #+BEGIN_SRC emacs-lisp
    ;; for debugging enable this: (setq debug-on-error t)
    (setq org-export-babel-evaluate nil)
    #+END_SRC

    Enable asynchronous org-babel execution. A ~:async~ flag needs to be added to the code-blocks
    which should use this behaviour. Can also be set per file with: ~#+PROPERTY: header-args :async~

    Source seems to be over here: https://github.com/astahlman/ob-async

    Currently untanged since it seems to be obsolete: /Warning (emacs):
    ob-async-org-babel-execute-src-block is longer needed in org-ctrl-c-ctrl-c-hook/
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package ob-async
        :ensure t
        :config
        (add-to-list 'org-ctrl-c-ctrl-c-hook 'ob-async-org-babel-execute-src-block)
        )
    #+END_SRC

**** Copy previous source-block
     This is helpful in training sessions (or when being lazy). (taken from here:
     https://github.com/baron42bba/.emacs.d/commit/41e2ab53e32abc12a1fbaf050e277228605f1338)

     #+BEGIN_SRC emacs-lisp
       (defun bba-copy-and-yank-org-src-block()
         "copy last org src block and insert it at point.
       If region is active copy only the src begin and src end lines."
         (interactive)
         (if (use-region-p)
             (progn
               (let (-p1 -p2 srclength)
                 (setq -p1 (region-beginning) -p2 (region-end))
                 (setq mark-active nil)
                 (re-search-backward "\#\\+BEGIN_SRC")
                 (set-mark-command nil)
                 (forward-line)
                 (beginning-of-line)
                 (kill-ring-save 1 1 1)
                 (goto-char -p1)
                 (set-mark-command nil)
                 (insert (pop kill-ring))
                 (setq srclength (- (region-end) (region-beginning)))
                 (setq mark-active nil)
                 (re-search-backward "\#\\+END_SRC")
                 (set-mark-command nil)
                 (forward-line)
                 (beginning-of-line)
                 (kill-ring-save 1 1 1)
                 (kill-append "\n" nil)
                 (goto-char (+ -p2 srclength))
                 (insert (pop kill-ring))
                 )
               )
           (progn
             (push-mark)
             (re-search-backward "\#\\+BEGIN_SRC")
             (set-mark-command nil)
             (re-search-forward "\#\\+END_SRC")
             (forward-line)
             (beginning-of-line)
             (kill-ring-save 1 1 1)
             (set-mark-command '1)
             (set-mark-command '1)
             (insert (pop kill-ring))
             (re-search-backward "\#\\+BEGIN_SRC")
             (forward-line)
             ))
         )

       (defun bba-copy-org-src-block()
         "copy last org src block and insert it at point."
         (interactive)
         (push-mark)
         (re-search-backward "\#\\+BEGIN_SRC")
         (set-mark-command nil)
         (re-search-forward "\#\\+END_SRC")
         (forward-line)
         (beginning-of-line)
         (kill-ring-save 1 1 1)
         (set-mark-command '1)
         (set-mark-command '1)
         )

       (define-key org-mode-map "\C-c\S-w" 'bba-copy-and-yank-org-src-block)
       (define-key org-mode-map (kbd "C-c s-w") 'bba-copy-org-src-block)
     #+END_SRC

*** Org-mode time logging
    log the time when a task is "done"
    #+BEGIN_SRC emacs-lisp
    (setq org-log-done t)
    #+END_SRC

    Set the format of the logged time
    #+BEGIN_SRC emacs-lisp
    ;; log times into a hideable logbook drawer
    (setq org-log-into-drawer t)
    ;; makes sure LOGBOOK and PROPERTIES go first
    (setq org-log-state-notes-insert-after-drawers t)
    #+END_SRC

*** Org-mode html export
    I have a bunch of css files within the "styles"-folder which i use on and off. They can then
    be used by adding the following line to the beginning of the file (path has to be adapted).
    #+BEGIN_SRC emacs-lisp :tangle no
    #+HTML_HEAD:   <link rel="stylesheet" type="text/css" href="styles\\markdown.css" />
    #+END_SRC

    Remove the "validate"-link from the org-html export
    #+BEGIN_SRC emacs-lisp
    (setq org-html-postamble nil)
    #+END_SRC

    Makes it so that names that include underscores dont look weird on html-export in case the
    org-mode exporter recognizes it as a superscript (my_hostname otherwise gets exported weird)
    #+BEGIN_SRC emacs-lisp
    (setq org-export-with-sub-superscripts nil)
    #+END_SRC

    Include a couple of information into the html-export and set the codig-system
    #+BEGIN_SRC emacs-lisp
    (setq org-export-coding-system 'utf-8-unix)
    (setq org-export-with-clocks t)
    (setq org-export-preserve-breaks t)
    #+END_SRC

**** ox-twbs package for better html export
     This package really has a good, yet simply html export and conveniently adds itself as a
     menu-entry to the html export-menu (triggered by C-c C-e and w o)
     #+BEGIN_SRC emacs-lisp
       (use-package ox-twbs
         :ensure t
       )
     #+END_SRC

**** Orgmode htmlize extension
     Inserts highlighting of Org Source-Blocks on Html-Export
     #+BEGIN_SRC emacs-lisp
       (use-package htmlize
         :ensure t
         )
     #+END_SRC

**** Make presentations with org-reveal                     :research:
     Downloaded this repo: https://github.com/hakimel/reveal.js.git
     #+BEGIN_SRC emacs-lisp
       (use-package ox-reveal
         :ensure t
         :config
         (if (equal "laptop" (getenv "SYSENV"))
             (setq org-reveal-root (concat "file:///home/" (getenv "USERNAME") "/reveal.js")))
         )
     #+END_SRC

**** Export with specific html theme
     Taken from here: http://correl.phoenixinquis.net/2016/02/23/org-publish-with-theme.html
     #+BEGIN_SRC emacs-lisp :tangle no
(defun my/with-theme (theme fn &rest args)
  (let ((current-themes custom-enabled-themes))
    (mapcar #'disable-theme custom-enabled-themes)
    (load-theme theme t)
    (let ((result (apply fn args)))
      (mapcar #'disable-theme custom-enabled-themes)
      (mapcar (lambda (theme) (load-theme theme t)) current-themes)
      result)))

(advice-add #'org-export-to-file :around (apply-partially #'my/with-theme 'deeper-blue))
(advice-add #'org-export-to-buffer :around (apply-partially #'my/with-theme 'deeper-blue))
     #+END_SRC

*** Org-mode org-clock-csv extension
   Exports clock-data to csv which is a useful data-format for generating graphs! Im not far into
   this topic though.
   #+BEGIN_SRC emacs-lisp
(use-package org-clock-csv
  :ensure t
  )
   #+END_SRC

*** Org-mode openwith extension
    Open pdfs with an external pdf-viewer to get a good resolution (Only use this for my laptop,
    needs to be fixed for my windows PC if i ever use it for them).
    #+BEGIN_SRC emacs-lisp
      (use-package openwith
        :ensure t
        :config
        (setq openwith-associations '(("\\.pdf\\'" "evince" (file))))
        (openwith-mode t)
      )
   #+END_SRC

*** Org-mode ics export
    Taken from here: http://ihrke.github.io/setup-for-sharing-org-mode-agenda-with-google-calendar-and-mobile-devices.html

    The result of this can be imported into a google calendar.

    #+BEGIN_SRC emacs-lisp
(setq org-icalendar-combined-agenda-file "~/Dropbox/org/gtd/org.ics")
(setq org-icalendar-include-todo '(all))
(setq org-icalendar-use-scheduled '(event-if-todo event-if-not-todo))
(setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo))

;; this hook saves an ics file once an org-buffer is saved
(defun my-icalendar-agenda-export()
    (if (string= (file-name-extension (buffer-file-name)) "org")
                              (org-icalendar-combine-agenda-files))
              )
    #+END_SRC

*** Org-mode calendar extension
   #+BEGIN_SRC emacs-lisp
(use-package calfw
  :ensure t
  :config
  (require 'calfw-org)
  (setq cfw:org-overwrite-default-keybinding t)
  )
   #+END_SRC

*** Org-mode alert extension
   This is a package on top of the original =alert.el=

   Im pretty sure this makes my "fbr/tea-timer" possible which is defined somewhere else. This way
   i can basically remind myself to not spend too much time on a task by setting a timer
   before-hand. This can also be done similarly with "C-c C-x C-e" after clocking into a task. This way an
   expected time-consumption can be set and the timer gets red once we exceed this time, which is
   not as convenient as having an extra alert-window in my oppinion.

   Go through this: https://emacs.stackexchange.com/questions/3844/good-methods-for-setting-up-alarms-audio-visual-triggered-by-org-mode-events

   The following code only works for my linux-laptop.
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package org-alert
       :ensure t
       :config
       (if (equal "laptop" (getenv "SYSENV"))
           (setq alert-default-style 'libnotify)
         (setq alert-default-style 'message))
       (setq org-alert-interval 60)
       (org-alert-enable)
       )
   #+END_SRC

   Experimental part taken from here: http://emacs-fu.blogspot.de/2009/11/showing-pop-ups.html

   Ideas / Programs I brought in:
   - [X] Use notify.exe
   - [X] Use =start-process= instead of =shell-command= for better testing
   - [ ] use "Media Player Classic" for the sound
     - it probably works like this: "/play /minimized / close"
   #+BEGIN_SRC emacs-lisp
     (defun djcb-popup (title msg &optional icon sound)
       "Show a popup if we're on windows, or echo it otherwise; TITLE
       is the title of the message, MSG is the context. Optionally,
       you can provide an ICON and a sound to be played"

       (interactive)
       ;; (when sound (shell-command
       ;;              (concat "mplayer -really-quiet " sound " 2> /dev/null")))
       (if (equal "home" (getenv "SYSENV"))
           (start-process "process-name" nil (concat "c:/users/" (getenv "USERNAME") "/.emacs.d/notifu/notifu64.exe")
                          "/p"  title
                          "/m" msg
                          "/i" (concat "c:/users/" (getenv "USERNAME") "/.emacs.d/notifu/appointment-soon.ico"))
         ;; text only version as fall-backn
         (message (concat title " : "  msg)))
       )
     ;; test:
     ;; (djcb-popup "org-mode Notification" "time is up")

     ;; the appointment notification facility
     (setq
      appt-message-warning-time 15 ;; warn 15 min in advance

      appt-display-mode-line t     ;; show in the modeline
      appt-display-format 'window) ;; use our func
     (appt-activate 1)              ;; active appt (appointment notification)
     (display-time)                 ;; time display is required for this...

     ;; update appt each time agenda opened
     (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)

     ;; our little façade-function for djcb-popup
     (defun djcb-appt-display (min-to-app new-time msg)
       (djcb-popup (format "Appointment in %s minute(s)" min-to-app) msg
                   ))
     (setq appt-disp-window-function (function djcb-appt-display))
   #+END_SRC

*** Org-mode notifications
    Disabled since it gives error "not compiled with dbus support".
    #+BEGIN_SRC emacs-lisp :tangle no
      (require 'notifications)

      (notifications-notify :title "Achtung!"
                            :body (format "You have an appointment in %d minutes" 10)
                            :app-name "Emacs: Org"
                            :sound-name "alarm-clock-elapsed")
    #+END_SRC

*** cm-mode for advanced authoring markup
    I like the idea of inserting comments like this package suggests, but I am still just trying
    this mode out.

    Demo: http://criticmarkup.com/

    Notes:
    - Breaks my indentation-shortcut M-q (fill-paragraph)
    - Creates notes that I havent figured out how to delete yet, there seems to be no delete
      command, just a command that inserts a "delete comment".
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package cm-mode
        :ensure t
        :config
        (setq cm-read-only-annotations nil)
        )
    #+END_SRC
** Tramp
   Tramp can be used to edit remote files.

   How to use tramp:
   - M-x ~load-file~
   - /<remote username>@<remote host>:

   Hint that my setup currently cannot work on windows:
   - https://www.gnu.org/software/emacs/manual/html_node/tramp/Windows-setup-hints.html

   #+BEGIN_SRC emacs-lisp
     (use-package tramp
       :ensure t
       :config
       ;; (setq tramp-verbose 5)
       (if (or (equal "work" (getenv "SYSENV"))
               (equal "home" (getenv "SYSENV")))
           (progn
             (setq default-tramp-method "plink")
             (setq ssh-program "TortoisePlink.exe")
             (setenv "PATH" (concat ssh-program ";" (getenv "PATH")))
             ;; Do autosaves locally
             (set-default 'tramp-auto-save-directory (concat "C:\\Users\\" (getenv "USERNAME") "\\AppData\\Local\\Temp"))
             )
         )
       ;; When connecting to a remote server it usually does source the profile, but for some
       ;; reason doesn't do that for $PATH by default. You'll have to specifically tell tramp
       ;; to do that from your .emacs with
       (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
       ;; With this you can do /sudo:ssh-host:/path-to-file-on-ssh-host
       (add-to-list 'tramp-default-proxies-alist '(nil "\\`root\\'" "/ssh:%h:"))
       )
   #+END_SRC

   A mode which reduces file interactions to a minimum, which i rarely use.
   #+BEGIN_SRC emacs-lisp
     (define-minor-mode sensitive-mode
       "For sensitive files like password lists.
        It disables backup creation and auto saving.

        With no argument, this command toggles the mode.
        Non-null prefix argument turns on the mode.
        Null prefix argument turns off the mode."
       ;; The initial value.
       nil
       ;; The indicator for the mode line.
       " Sensitive"
       ;; The minor mode bindings.
       nil
       (if (symbol-value sensitive-mode)
           (progn
             ;; disable backups
             (set (make-local-variable 'backup-inhibited) t)
             ;; disable auto-save
             (if auto-save-default
                 (auto-save-mode -1)))
         ;; resort to default value of backup-inhibited
         (kill-local-variable 'backup-inhibited)
         ;; resort to default auto save setting
         (if auto-save-default
             (auto-save-mode 1))))
   #+END_SRC

*** Make bash files executable on save
    #+BEGIN_SRC emacs-lisp
 (add-hook `after-save-hook
           #'(lambda ()
               (if (not
                    (or
                     (string-match ".htm" buffer-file-name)
                     (string-match ".org" buffer-file-name))
                    )
                   (check-parens))

               (and (save-excursion
                      (save-restriction
                        (widen)
                        (goto-char (point-min))
                        (save-match-data
                          (looking-at "^#!"))))
                    (if (file-remote-p buffer-file-name)
                        (progn
                          (not (file-executable-p buffer-file-name))
                          (shell-command (concat "chmod u+x " (file-name-nondirectory buffer-file-name)))
                          (message
                           (concat "Saved as script via tramp: " buffer-file-name))
                          )
                      (progn
                        (not (file-executable-p buffer-file-name))
                        (shell-command (concat "chmod u+x " buffer-file-name))
                        (message
                         (concat "Saved as script: " buffer-file-name)))))))
    #+END_SRC

*** Tramp fixes
    From Howards Blog: http://www.howardism.org/Technical/Emacs/literate-devops.html this is
    supposed to overwrite the standard org-mode function in ~ob-core.el~ which is buggy and can
    completely block the org-babel functionality on windows.

    On windows the faulty file is here: <path_to_emacs>\emacs\share\emacs\24.5\lisp\org
    #+BEGIN_SRC emacs-lisp
      (defun org-babel-temp-file (prefix &optional suffix)
        "Create a temporary file in the `org-babel-temporary-directory'.
      Passes PREFIX and SUFFIX directly to `make-temp-file' with the
      value of `temporary-file-directory' temporarily set to the value
      of `org-babel-temporary-directory'."
        (if (file-remote-p default-directory)
            (let ((prefix
                   ;; We cannot use `temporary-file-directory' as local part
                   ;; on the remote host, because it might be another OS
                   ;; there.  So we assume "/tmp", which ought to exist on
                   ;; relevant architectures.
                   (concat (file-remote-p default-directory)
                           ;; REPLACE temporary-file-directory with /tmp:
                           (expand-file-name prefix "/tmp/"))))
              (make-temp-file prefix nil suffix))
          (let ((temporary-file-directory
                 (or (and (boundp 'org-babel-temporary-directory)
                          (file-exists-p org-babel-temporary-directory)
                          org-babel-temporary-directory)
                     temporary-file-directory)))
            (make-temp-file prefix nil suffix))))
    #+END_SRC

    Fix for base64 error (currently unused / unnecessary)
    See footnotes here: http://www.howardism.org/Technical/Emacs/literate-devops.html
    #+BEGIN_SRC emacs-lisp :tangle no
    (setq tramp-remote-coding-commands '(b64 "base64" "base64 -d -i"))
    #+END_SRC

** Elfeed
   #+BEGIN_SRC emacs-lisp
     (use-package elfeed
       :ensure t
       :bind (:map elfeed-search-mode-map
                   ("m" . elfeed-toggle-star)
                   )
       )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package elfeed-org
       :ensure t
       :config
       (elfeed-org)
       (setq rmh-elfeed-org-files (list (concat "C:\\Users\\" (getenv "USERNAME") "\\Dropbox\\org\\hobby\\elfeed.org")) )
       )
   #+END_SRC

** Blogging
   Doesnt work out of the box, needs some setup! See "setup the blog" for more info (coming soon).

   Taken from: http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
   #+BEGIN_SRC emacs-lisp
     (defvar hugo-content-dir "~/Dropbox/org/blog/content/"
       "Path to Hugo's content directory")

     (defun hugo-ensure-property (property)
       "Make sure that a property exists. If not, it will be created.

     Returns the property name if the property has been created,
     otherwise nil."
       (if (org-entry-get nil property)
           nil
         (progn (org-entry-put nil property "")
                property)))

     (defun hugo-ensure-properties ()
       "This ensures that several properties exists. If not, these
     properties will be created in an empty form. In this case, the
     drawer will also be opened and the cursor will be positioned
     at the first element that needs to be filled.

     Returns list of properties that still must be filled in"
       (require 'dash)
       (let ((current-time (format-time-string (org-time-stamp-format t t) (org-current-time)))
             first)
         (save-excursion
           (unless (org-entry-get nil "TITLE")
             (org-entry-put nil "TITLE" (nth 4 (org-heading-components))))
           (setq first (--first it (mapcar #'hugo-ensure-property '("HUGO_TAGS" "HUGO_TOPICS" "HUGO_FILE"))))
           (unless (org-entry-get nil "HUGO_DATE")
             (org-entry-put nil "HUGO_DATE" current-time)))
         (when first
           (goto-char (org-entry-beginning-position))
           ;; The following opens the drawer
           (forward-line 1)
           (beginning-of-line 1)
           (when (looking-at org-drawer-regexp)
             (org-flag-drawer nil))
           ;; And now move to the drawer property
           (search-forward (concat ":" first ":"))
           (end-of-line))
         first))

     (defun hugo ()
       (interactive)
       (unless (hugo-ensure-properties)
         (let* ((title    (concat "title = \"" (org-entry-get nil "TITLE") "\"\n"))
                (date     (concat "date = \"" (format-time-string "%Y-%m-%d" (apply 'encode-time (org-parse-time-string (org-entry-get nil "HUGO_DATE"))) t) "\"\n"))
                (topics   (concat "topics = [ \"" (mapconcat 'identity (split-string (org-entry-get nil "HUGO_TOPICS") "\\( *, *\\)" t) "\", \"") "\" ]\n"))
                (tags     (concat "tags = [ \"" (mapconcat 'identity (split-string (org-entry-get nil "HUGO_TAGS") "\\( *, *\\)" t) "\", \"") "\" ]\n"))
                (fm (concat "+++\n"
                            title
                            date
                            tags
                            topics
                            "+++\n\n"))
                (file     (org-entry-get nil "HUGO_FILE"))
                (coding-system-for-write buffer-file-coding-system)
                (backend  'md)
                (blog))
           ;; try to load org-mode/contrib/lisp/ox-gfm.el and use it as backend
           (if (require 'ox-gfm nil t)
               (setq backend 'gfm)
             (require 'ox-md))
           (setq blog (org-export-as backend t))
           ;; Normalize save file path
           (unless (string-match "^[/~]" file)
             (setq file (concat hugo-content-dir file))
           (unless (string-match "\\.md$" file)
             (setq file (concat file ".md")))
           ;; save markdown
           (with-temp-buffer
             (insert fm)
             (insert blog)
             (untabify (point-min) (point-max))
             (write-file file)
             (message "Exported to %s" file))
           ))))
   #+END_SRC

** SQL
   Thanks to baron42bba and https://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client
   I yet have to actually test this config.

   Also check:
   - https://github.com/Trevoke/sqlup-mode.el
     - a presumably nice mode for writing sql

   #+BEGIN_SRC emacs-lisp :tangle no
   ;; truncate lines such that tables with many columns dont line-wrap
   (add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))

   (defun my-sql-connect ()
     (interactive)
     (require 'my-password "~/.emacs_secrets.el.gpg")
     (setq sql-product 'mysql)

     (let ((connection (helm-comp-read
                        "Select server: "
                        my-sql-servers-alist
                        )))
       (sql-connect connection))
     (sql-rename-buffer)
     )
   #+END_SRC

   your =~/.emacs_secrets.el.gpg= might look like:

   #+BEGIN_SRC emacs-lisp :tangle no
   (setq my-sql-servers-alist
         '("serverA" "serverB"))

   (setq sql-connection-alist
         '((bbaprd (sql-product 'mysql)
                   (sql-server "host42.foo.com")
                   (sql-user "dbadmin")
                   (sql-password "foo")
                   (sql-database "serverA"))
           (bbatst (sql-product 'mysql)
                   (sql-server "host42.foo.com")
                   (sql-user "dbadmin")
                   (sql-password "foo")
                   (sql-database "serverB"))
           ))

   (provide 'my-password)
   #+END_SRC

* Programming
  I rarely use emacs as an IDE, so this is not a rich section.

** C Lang
  The main thing i use from the following is the "jump to definition" function, which is otherwise
  a tedious manual task.
  #+BEGIN_SRC emacs-lisp
(use-package helm-gtags
  :if (equal "laptop" (getenv "SYSENV"))
  :config
  ;; Enable helm-gtags-mode
  (add-hook 'dired-mode-hook 'helm-gtags-mode)
  (add-hook 'eshell-mode-hook 'helm-gtags-mode)
  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)

  (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
  (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)

  (setq-local imenu-create-index-function #'ggtags-build-imenu-index)
  )
  #+END_SRC

* Themes
  This section should be at the end, since some of the modes come with their own color-settings
  and these are supposed to be overwritten by the theme-config, the theme-config should have the
  final say in coloring, so I can appreciate the themes in all their beauty.

  Themes usually dont touch the helm-interface, for that there is a package called "helm-themes"
  and it usually makes sense to load the helm-theme along with the "main" theme.

** Seti theme
   I used this theme for a long time and it is pretty good, but sometimes i have to mix it up!
   Care for the workaround though!
   #+BEGIN_SRC emacs-lisp :results silent :tangle no
     (use-package seti-theme
       :if (or (equal "home" (getenv "SYSENV")) (equal "work" (getenv "SYSENV")))
       :config
       (custom-set-faces
        '(font-lock-function-name-face ((t (:foreground "royal blue"))))
        '(font-lock-comment-face ((t (:foreground "light sea green")))) ;9FCA56
        '(helm-source-header ((t (:background "gray14" :foreground "white" :weight bold :height 1.3 :family "Sans Serif"))))
        `(helm-candidate-number ((t (:foreground ,cl-meta-information-one))))
        ;;'(helm-candidate-number ((t (:foreground "goldenrod2"))))
        `(helm-selection ((t (:background ,cl-selection-background :foreground ,cl-selection-foreground))))
        ;;'(helm-selection ((t (:background "light gray" :foreground "gray5"))))
        ;; added the outline definitions to blindly work towards a global color theme
        ;; which variables inherit from these "outline" variables?
        `(org-level-1 ((t (:inherit org-level-1 :foreground ,cl-first-level))))
        `(outline-2 ((t (:foreground ,cl-second-level))))
        `(outline-3 ((t (:foreground ,cl-third-level))))
        `(org-document-title ((t (:foreground ,cl-headline :weight bold :height 1.44))))
        `(org-headline-done ((((class color) (min-colors 16) (background dark)) (:strike-through t))))
        `(org-date ((t (:foreground ,cl-meta-information-one :underline t))))
        `(org-link ((t (:inherit nil :foreground ,cl-meta-information-one))))
        ;; Color the Org-Blocks beautifully for color schemes that do not do that
        `(org-block-foreground ((t (:foreground "dark orange"))))
        `(org-block-begin-line ((t (:foreground "medium slate blue"))))
        `(org-block-end-line ((t (:foreground "medium slate blue"))))
        `(org-document-info ((t (:foreground "medium sea green"))))
        `(org-document-info-keyword ((t (:foreground "light sea green"))))
        ;; make ~words~ pop in this theme
        `(org-code ((t (:inherit shadow :foreground "DarkOrange3"))))
        ;; my attempt to remove the line striking through the modeline by resetting the face
        `(mode-line ((t (:foreground "#D4D7D6"))))
        )
       (set-background-color "grey12")
       )
   #+END_SRC

   Manually uncommented "mode-line" settings of this theme in the package itself for now.

*** Seti-theme workaround
    I had to uncomment two lines in the official package for this theme. If i dont do so the
    html-export breaks.
    #+BEGIN_SRC sh :results drawer :tangle no
    # Here are the two lines
    grep "breaks" ~/.emacs.d/elpa/seti-theme-20161208.836/seti-theme.el
    #+END_SRC

    #+RESULTS:
    :RESULTS:
       ;; `(font-lock-comment-delimiter-face ((t (:inherit (font-lock-comment-face))))) ;;disabled because it breaks the html-export
       ;; `(font-lock-comment-face ((t (:foreground ,text-3)))) ;;disabled because it breaks the html-export
    :END:

    Apart from that i now (<2017-04-13 Do>) get an error that the face "bold" does not exist. A
    bunch of settings in the theme inherit from this face. I guess i have to fix this or use a
    different theme.

** Eziam theme
   This is a new-comer, the grayscaling really is a new take on themes for me and the
   source-blocks look much nicer. However headlines in org-mode are really chunky and I'm not used
   to that yet.

   Downloaded from: https://github.com/thblt/eziam-theme-emacs.git
   It isn't on melpa yet.
   #+BEGIN_SRC emacs-lisp :results silent :tangle no
     (use-package eziam-theme
       :if (equal "laptop" (getenv "SYSENV"))
       :init
       ;; alternative for loading the manually downloaded package
       ;; (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/eziam-emacs-theme")
       (load-theme 'eziam-light t)
       )
   #+END_SRC

   For installation execute the following:
   #+BEGIN_SRC sh :dir ~/.emacs.d/themes :results silent :tangle no
     rm -rf eziam-theme-emacs #makes sure the directory is clean
     git clone https://github.com/thblt/eziam-theme-emacs.git
   #+END_SRC

** zenburn theme
   A really classy but kind of dirty / muddy theme.
   #+BEGIN_SRC emacs-lisp :results silent :tangle no
     (use-package zenburn-theme
       :if (or (equal "work" (getenv "SYSENV")) (equal nil (getenv "SYSENV")))
       :config
       (load-theme 'zenburn t)
     )
   #+END_SRC

** Challenger-Deep theme
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package challenger-deep-theme
       :if (or (equal "home" (getenv "SYSENV")) (equal "work" (getenv "SYSENV")) (equal nil (getenv "SYSENV")))
       :init
       (load-theme 'challenger-deep t)
       )
   #+END_SRC

** Themes i never used for long
   #+BEGIN_SRC emacs-lisp :tangle no
     (load-file "~/.emacs.d/elpa/kaolin-theme/kaolin-theme.el")
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package alect-themes
       :ensure t
       :config
       (load-theme 'alect-black t)
       )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package dark-mint-theme
       :ensure t
       :config
       (load-theme 'dark-mint t)
       )
   #+END_SRC

   Seems not to have a good contrast even though the color palette works together well.
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package twilight-bright-theme
       :ensure t
       :config
       (load-theme 'twilight-bright t)
       )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package oceanic-theme
       :ensure t
       :config
       (load-theme 'oceanic t)
       )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package avk-emacs-themes
        :ensure t
        :config
        (load-theme 'avk-darkblue-white t)
        )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package solarized-theme
       :if (equal "home" (getenv "SYSENV"))
       :config
       (load-theme 'solarized-dark t)
       (set-frame-parameter nil 'background-mode 'dark)
       )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
   (use-package challenger-deep-theme
   :ensure t
   )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package moe-theme
     :ensure t
     :config
     (load-theme 'moe-light t)
     )
   #+END_SRC

** Monokai +gnome madness
   Installed packages ontop of gnome:
   - Inspired by: https://www.reddit.com/r/unixporn/comments/5pk5p1/gala_with_emacs_made_pretty/
   - https://github.com/optimisme/gnome-shell-simple-dock
     - installable using a simple click in the browser
   - https://github.com/andreisergiu98/arc-flatabulous-theme
     - has to be installed manually
     - commands that helped me on Ubuntu 16.04 LTS that uses lightdm by default:
       #+BEGIN_SRC sh :tangle no
       apt-get install ubuntu-gnome-desktop gnome-shell gdm
       dpkg-reconfigure gdm/lightdm
       #+END_SRC
   - https://github.com/horst3180/arc-icon-theme

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package monokai-theme
       :ensure t
       :config
       (load-theme 'monokai t)
       (set-background-color "#2f343f")
       )
   #+END_SRC

** Prassee theme
   Taken from: https://github.com/prassee/prassee-emacs-theme
   #+BEGIN_SRC sh :dir ~/.emacs.d :tangle no
     mkdir -p themes
     cd themes
     git clone https://github.com/prassee/prassee-emacs-theme
   #+END_SRC

   Check content of download:
   #+BEGIN_SRC sh :tangle no :results drawer
     ls -l ~/.emacs.d/themes/prassee-emacs-theme
   #+END_SRC

   Load the theme
   #+BEGIN_SRC emacs-lisp :results silent :tangle no
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/prassee-emacs-theme")
     (load-theme 'prassee t)
     ;; do my costumization:
     (custom-set-faces
      `(org-block-begin-line      ((t (:background "#3D3D48" :foreground "#65737E"))))
      `(org-formula      ((t (:foreground "azure4"))))
      )
   #+END_SRC

** Org-mode Size settings
   Regardless of the theme i got used to having the org-headlines at certain sizes.
   #+BEGIN_SRC emacs-lisp :tangle no
;; Org-mode Size-Customizations
(custom-set-faces
 `(org-level-1 ((t (:inherit outline-1 :height 1.4))))
 `(org-level-2 ((t (:inherit outline-2 :height 1.3))))
 `(org-level-3 ((t (:inherit outline-3 :height 1.2))))
 `(org-level-4 ((t (:inherit outline-4 :height 1.1))))
 )
   #+END_SRC

** Purple-haze theme
   This theme is great, some of the monitors i use however dont display the slight
   color-differences between the different tones of purple nicely, such that it just looks
   black. Playing with the monitor-settings sadly doesnt resolve this, this might not be my final
   theme. "Final theme".. *smirk*

   #+BEGIN_SRC emacs-lisp
     ;; (use-package purple-haze-theme
     ;;   :ensure t
     ;;   :config
     ;;   (load-theme 'purple-haze t)
     ;;   )

     ;; (use-package helm-themes
     ;;   :ensure t
     ;;   :config
     ;;   ;; (helm-themes--load-theme "purple-haze")
     ;;   )
   #+END_SRC

* The cursor style
  Set this after the themes since some themes reset this.

  Currently untangled since the cursor seems to adapt the text color which makes it hard to spot
  at times.
  #+BEGIN_SRC emacs-lisp :tangle no
    (set-default 'cursor-type 'bar)
    (set-cursor-color "#000000")
  #+END_SRC

* Modeline
  I never learned how to successfully edit the modeline yet, i just keep copying configs from nice
  screenshots which then only work in part so i have to delete them again lol. Some themes come
  with okay modeline configurations.

  I Load it after the theme since themes sometimes set their own mode-line.

  Former problem: use-package doesnt find spaceline-config or spaceline, doest this still exist?

** Spaceline config
   Another modeline config taken from here: https://github.com/prassee/prassee-emacs-theme
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package spaceline
       :init
       (progn
         (require 'spaceline-config)
         (setq powerline-default-separator 'slant)
         (setq spaceline-workspace-numbers-unicode t)
         (setq spaceline-separator-dir-left '(left . left))
         (setq spaceline-separator-dir-right '(right . right))
         (setq powerline-height 27)
         (spaceline-toggle-window-number-on)
         (spaceline-toggle-buffer-modified-on)
         (spaceline-toggle-major-mode-on)
         (spaceline-toggle-battery-on)
         (spaceline-toggle-hud-on)
         (spaceline-toggle-projectile-root-on)
         (spaceline-emacs-theme)
         (spaceline-toggle-minor-modes-off)
         ))

     ;; first try to make the inactive face more readable
     ;; (custom-set-faces
     ;;  `(mode-line-inactive
     ;;    ((t (:background "grey40")))))
     #+END_SRC

** Okay modeline that sometimes doesnt work
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package spaceline-config
       :ensure spaceline
       :config
       (spaceline-emacs-theme)
       (spaceline-helm-mode)
       (spaceline-toggle-buffer-size-off)
       (spaceline-toggle-nyan-cat-on)
       (spaceline-toggle-minor-modes-off)
       (spaceline-toggle-buffer-position-off)
       (custom-set-faces
        '(spaceline-highlight-face ((t (:inherit 'mode-line :foreground "#3E3D31" :background "SeaGreen3"))))
        '(spaceline-modified ((t (:inherit 'mode-line :foreground "#3E3D31" :background "SeaGreen3"))))
        '(spaceline-unmodified ((t (:inherit 'mode-line :foreground "#3E3D31" :background "SeaGreen3"))))
        '(spaceline-unmodified-p ((t (:inherit 'mode-line :foreground "#3E3D31" :background "SeaGreen3"))))
        ;; LightGoldenrod ist die Farbe vom Helm-buffer, nur was ist das Face?
        )
       (spaceline-highlight-face-default)
       (spaceline-highlight-face-modified)
       )

     ;; Sadly results in flickering on my laptop and doesnt install relyably on my windows-pc
     (use-package nyan-mode
       :ensure t
       :config
       (nyan-mode 1)
       (nyan-start-animation)
       )
   #+END_SRC
.
