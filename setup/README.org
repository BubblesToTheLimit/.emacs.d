* Why setting up a remote emacs installation is useful
  When doing system administration for a whole day or longer on a new remote machine it is
  convenient to start emacs from that remote machine.
  - I can document my work with org-babel most efficiently, because it has the highest performance
    when interacting with the local host
  - When someone interrupts me in my work which during a whole day is definately going to happen I
    have to switch contexts easily. Having the contexts conveniently divided simply by using the
    two different instances of emacs I dont really need to search for buffers or switch my screen
    configuration (split screens, etc). Simply by switching to my local emacs I already have all
    my general notes open and I can technically context-switch within a second.

  For this I install emacs with my configuration on those remote systems. This task can be
  automated using the compile_emacs.sh script.

* Emacs for windows
  There is a difference in emacs compilations, since each of them includes different binaries,
  enabling different kinds of functions in emacs. On the search for the best emacs compilation
  I've tried a considerable amount (see list below)

  Emacs compilations for windows I tried:
  - https://vigou3.github.io/emacs-modified-windows/
    - good image support
    - Includes ess which is important for R support (and in turn my bachelor thesis)
    - Seems faster than other binaries
  - https://sourceforge.net/projects/emacsbinw64/
    - The only thing this compilation doesn't do well is image-interaction, but since everything
      else works this is my favorite emacs source. For linux I dont care about the source of the
      installation package because I never had any problems.
  - http://www.russet.org.uk/scratch/
    - Its supposed to be faster than current emacs 25 compilations, I couldnt confirm that though
    - Discussion over here: http://lists.gnu.org/archive/html/emacs-devel/2016-11/msg00280.html
  - http://emacs.link/
    - can do html export correctly
    - no image support
  - http://vgoulet.act.ulaval.ca/en/emacs/windows/
    - breaks html export for some font lock reason
    - good image support
  - http://emacs-bootstrap.com/
    - haven't tried this yet, seems really useful for getting an IDE-like setup with emacs easily
  - http://alpha.gnu.org/gnu/emacs/pretest/windows/

  The missing libraries:
  Emacs depends on a bunch of libraries (libpng for example) which dont come with alot of
  emacses, which means you will not have image support. Here are some approaches to fix this:
  - https://sourceforge.net/projects/ezwinports/?source=typ_redirect
  - http://ftp.gnu.org/gnu/emacs/windows/emacs-25-x86_64-deps.zip
    - awesome zip-file though which simply has alot of the emacs dependencies, it can just be
      unzipped in the directory of the emacs compilation.
  - hints on how to get the gnutls library
    - http://xn--9dbdkw.se/diary/how_to_enable_GnuTLS_for_Emacs_24_on_Windows/index.en.html
    - http://emacs.stackexchange.com/questions/27202/how-do-i-install-gnutls-for-emacs-25-1-on-windows

  Installation Steps:
  1. Pick an emacs compilation from the list above, download and install it
  2. Install a current version of git for magit
  3. Set the environment variable "HOME" to "%USERPROFILE%" (otherwise "~" doesnt work correctly)
  4. Set the environment variable "SYSENV" to work / home / etc. (specific to my config)
  5. Install cygwin and add it to to the system environment variables (otherwise things like
     "diff-buffers" doesn't work)

* The Server-Client Setup
** Windows
   The client link on windows looks like this:
   "C:\Program Files (x86)\GNU Emacs 25.1\bin\emacsclientw.exe" -na "" -c

   The daemon link on windows looks like this (should be in autostart (Windows+R shell:startup))
   "C:\Program Files (x86)\GNU Emacs 25.1\bin\runemacs.exe" --daemon

   Great resource:
   https://www.emacswiki.org/emacs/EmacsMsWindowsIntegration

** Linux
   https://taingram.org/2017/05/09/using-emacsclient-to-speed-up-editing/

* Installation tips on linux
  The [[file:compile_emacs.sh]] usually does fine until it calls ~./configure~. Here missing libraries
  are checked which should be installed.

** Centos
   Installing the typically missing packages one by one:n
   #+BEGIN_SRC sh
   # if you get the error: “configure: error: You seem to be running X, but no X development libraries”
   yum install gtk2-devel
   # for missing image libraries:
   yum install libXpm-devel.i386 giflib-devel.i386 libtiff-devel.i386 libjpeg-devel.i386
   #+END_SRC

   The attempt to automate that:
   #+BEGIN_SRC sh
   yum install yum-utils
   yum-builddep emacs
   #+END_SRC

** Without root privileges
   1) Download emacs archive to ~/src/ and unpack it
   2) Configure with these parameters (you might have to add some --with-no options)
      #+BEGIN_SRC sh
      cd ~/src/emacs-25.1
      ./configure --prefix=$home/emacs --bindir=$home/bin
      #+END_SRC
   3) Install emacs
      #+BEGIN_SRC sh
      make && make install
      #+END_SRC

** Ubuntu
   Used this approach on my laptop. Taken from askubuntu.com
   This uses this ppa: https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa
   #+BEGIN_SRC sh
 sudo add-apt-repository ppa:ubuntu-elisp/ppa
 sudo apt-get update
 sudo apt-get install emacs-snapshot
   #+END_SRC

* Fixing org-mode
  Errors i get (when i try to execute source-blocks) that got solved by loading org-mode at
  startup correctly:
  #+BEGIN_SRC sh
  Evaluation of this sh code block is disabled.
  # after removing the org-package from ~/.emacs.d/elpa/ and restarting i get:
  org-babel-variable-assignments:sh: Symbol’s function definition is void: org-babel-get-header
  Symbol's function definition is void: org-link-types
  Invalid function: org-babel-header-args-safe-fn
  #+END_SRC

  On my way these helped me:
  #+BEGIN_SRC emacs-lisp
(byte-recompile-directory (expand-file-name "~/.emacs.d/elpa/org-20170210") 0)
(byte-recompile-directory (expand-file-name "~/.emacs.d/elpa/org-plus-contrib-20170210") 0)
  #+END_SRC
